// MIT License

// Copyright (C) 2022, Twilio, Inc. <help@twilio.com>

// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
// of the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#require "Promise.lib.nut:4.0.0"
#require "utilities.lib.nut:3.0.1"

@include once "../src/shared/Logger/Logger.shared.nut"
@include once "Esp32Loader.device.nut"

// If firmware loaded successfully:
// 2022-06-24T20:18:25.410 +00:00 	[Device] 	Simple test ESP loader
// 2022-06-24T20:18:28.389 +00:00 	[Device] 	[INFO][ESP32Loader] Prepare success
// 2022-06-24T20:18:28.413 +00:00 	[Device] 	[INFO][ESP32Loader] Send packet. Sequnce number: 0
// 2022-06-24T20:18:28.651 +00:00 	[Device] 	[INFO][ESP32Loader] Send packet. Sequnce number: 1
// 2022-06-24T20:18:28.925 +00:00 	[Device] 	[INFO][ESP32Loader] Send packet. Sequnce number: 2
// 2022-06-24T20:18:29.246 +00:00 	[Device] 	[INFO][ESP32Loader] Send packet. Sequnce number: 3
// 2022-06-24T20:18:29.606 +00:00 	[Device] 	[INFO][ESP32Loader] Send packet. Sequnce number: 4
// 2022-06-24T20:18:29.906 +00:00 	[Device] 	[INFO][ESP32Loader] Send packet. Sequnce number: 5
// 2022-06-24T20:18:30.204 +00:00 	[Device] 	[INFO][ESP32Loader] Send packet. Sequnce number: 6
// 2022-06-24T20:18:30.526 +00:00 	[Device] 	[INFO][ESP32Loader] Send packet. Sequnce number: 7
// 2022-06-24T20:18:30.868 +00:00 	[Device] 	[INFO][ESP32Loader] Verification MD5.
// 2022-06-24T20:18:31.068 +00:00 	[Device] 	Load firmware success
// 2022-06-24T20:18:32.243 +00:00 	[Device] 	ets Jun  8 2016 00:22:57
// 2022-06-24T20:18:32.243 +00:00 	[Device] 	rst:0x1 (POWERON_RESET),boot:0x13 (SPI_FAST_FLASH_BOOT)
// 2022-06-24T20:18:32.265 +00:00 	[Device] 	configsip: 0, SPIWP:0xee
// 2022-06-24T20:18:32.307 +00:00 	[Device] 	clk_drv:0x00,q_drv:0x00,d_drv:0x00,cs0_drv:0x00,hd_drv:0x00,wp_drv:0x00
// 2022-06-24T20:18:32.307 +00:00 	[Device] 	mode:DIO, clock div:2
// 2022-06-24T20:18:32.328 +00:00 	[Device] 	load:0x3fff0008,len:1564
// 2022-06-24T20:18:32.341 +00:00 	[Device] 	ho 0 tail 12 room 4
// 2022-06-24T20:18:32.371 +00:00 	[Device] 	load:0x40078000,len:3976
// 2022-06-24T20:18:32.389 +00:00 	[Device] 	ho 0 tail 12 room 4
// 2022-06-24T20:18:32.389 +00:00 	[Device] 	load:0x40080400,len:2492
// 2022-06-24T20:18:32.424 +00:00 	[Device] 	entry 0x40080574
// 2022-06-24T20:18:32.424 +00:00 	[Device] 	[0;32mI (30) boot: TEST APPLICATION

// Simple application address in the ESP flash
APP_SIMPLE_TEST_ESP_FLASH_ADDR <- 0x00;
// MD5 sum of simple application
APP_SIMPLE_TEST_MD5 <- "4f13d643633c42515beb78e33b7cf297";
// Simple application periodically print to UART debug info and message "TEST APPLICATION"
APP_SIMPLE_TEST <- "";

// start delay
const APP_SWITCH_START_DELAY = 1;
// new RX FIFO size
const APP_RX_FIFO_SIZE = 256;
// UART settings
const APP_DEFAULT_BAUDRATE = 115200;
const APP_DEFAULT_BIT_IN_CHAR = 8;
const APP_DAFAULT_STOP_BITS = 1;

// The available range for erasing
const APP_IMP_FLASH_START_ADDR = 0x000000;
// Flash sector size
const APP_IMP_FLASH_SECTOR_SIZE = 0x1000;

class FlipFlop {
    _clkPin = null;
    _switchPin = null;

    constructor(clkPin, switchPin) {
        _clkPin = clkPin;
        _switchPin = switchPin;
    }

    function _get(key) {
        if (!(key in _switchPin)) {
            throw null;
        }

        // We want to clock the flip-flop after every change on the pin. This will trigger clocking even when the pin is being read.
        // But this shouldn't affect anything. Moreover, it's assumed that DIGITAL_OUT pins are read rarely.
        // To "attach" clocking to every pin's function, we return a wrapper-function that calls the requested original pin's
        // function and then clocks the flip-flop. This will make it transparent for the other components/modules.
        // All members of hardware.pin objects are functions. Hence we can always return a function here
        return function(...) {
            // Let's call the requested function with the arguments passed
            vargv.insert(0, _switchPin);
            // Also, we save the value returned by the original pin's function
            local res = _switchPin[key].acall(vargv);

            // Then we clock the flip-flop assuming that the default pin value is LOW (externally pulled-down)
            _clkPin.configure(DIGITAL_OUT, 1);
            _clkPin.disable();

            // Return the value returned by the original pin's function
            return res;
        };
    }
}

// Imp UART connected to the ESP32C3
APP_ESP_UART <- hardware.uartPQRS;
// ESP32 power on/off pin
APP_SWITCH_PIN <- FlipFlop(hardware.pinYD, hardware.pinS);
// Strap pin 1 (ESP32C3 GP9 BOOT)
APP_STRAP_PIN1 <- hardware.pinH;
// Strap pin 2 (ESP32C3 EN CHIP_EN)
APP_STRAP_PIN2 <- hardware.pinE;
// Strap pin 3 (ESP32C3 GP8 PRINTF_EN)
APP_STRAP_PIN3 <- hardware.pinJ;
// Flash parameters
APP_ESP_FLASH_PARAM <- {"id"         : 0x00,
                        "totSize"    : ESP32_LOADER_FLASH_SIZE.SZ4MB,
                        "blockSize"  : 65536,
                        "sectSize"   : 4096,
                        "pageSize"   : 256,
                        "statusMask" : 65535};

server.log("Simple test ESP loader");
// erase imp flash region
local simpleTestLen = APP_SIMPLE_TEST.len() / 2;
local sectorCount = (simpleTestLen + APP_IMP_FLASH_SECTOR_SIZE - 1) / APP_IMP_FLASH_SECTOR_SIZE;
local spiFlash = hardware.spiflash;
spiFlash.enable();
for (local addr = APP_IMP_FLASH_START_ADDR;
     addr < (APP_IMP_FLASH_START_ADDR +
             sectorCount*APP_IMP_FLASH_SECTOR_SIZE);
     addr += APP_IMP_FLASH_SECTOR_SIZE) {
    spiFlash.erasesector(addr);
}
// write simple test application to imp flash
spiFlash.write(APP_IMP_FLASH_START_ADDR,
               utilities.hexStringToBlob(APP_SIMPLE_TEST));
spiFlash.disable();

// data from ESP
res <- "";
// get data from UART
function loop() {
    local data = APP_ESP_UART.read();
    // read until FIFO not empty and accumulate to res string
    while (data != -1) {
        res += data.tochar();
        data = APP_ESP_UART.read();
    }
    if (res.len()) {
        // split to strings
        local resArr = split(res, "\r\n");
        foreach (el in resArr) {
            server.log(el);
        }
        res = "";
    }
}
// init ESP32Loader class
espLoader <- ESP32Loader({
                            "strappingPin1" : APP_STRAP_PIN1,
                            "strappingPin2" : APP_STRAP_PIN2,
                            "strappingPin3" : APP_STRAP_PIN3
                         },
                         APP_ESP_UART,
                         APP_ESP_FLASH_PARAM,
                         APP_SWITCH_PIN);

espLoader.start()
.then(function(_) {
    server.log("ROM loader successfully started");

    return espLoader.load(APP_IMP_FLASH_START_ADDR,
                          APP_SIMPLE_TEST_ESP_FLASH_ADDR,
                          simpleTestLen,
                          APP_SIMPLE_TEST_MD5)
    .then(function(_) {
        server.log("Loading successfully finished");
        return espLoader.finish();
    }.bindenv(this), function(err) {
        server.error("Loading failed: " + err);
        return espLoader.finish();
    }.bindenv(this));
}.bindenv(this), function(err) {
    server.error("Couldn't start ROM loader: " + err);
}.bindenv(this))
.finally(function(_) {
    server.log("Rebooting ESP and activating UART for reading..");
    APP_SWITCH_PIN.configure(DIGITAL_OUT, 0);
    imp.sleep(APP_SWITCH_START_DELAY);
    APP_SWITCH_PIN.write(1);
    APP_ESP_UART.disable();
    APP_ESP_UART.setrxfifosize(APP_RX_FIFO_SIZE);
    APP_ESP_UART.configure(APP_DEFAULT_BAUDRATE,
                           APP_DEFAULT_BIT_IN_CHAR,
                           PARITY_NONE,
                           APP_DAFAULT_STOP_BITS,
                           NO_CTSRTS,
                           loop);
}.bindenv(this));